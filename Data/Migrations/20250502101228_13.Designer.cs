// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotNetStore.Data;

#nullable disable

namespace dotNetStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250502101228_13")]
    partial class _13
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dotNetStore.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("dotNetStore.Models.CategorieProduit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SousCategorie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesProduits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Categorie = "Ordinateurs",
                            SousCategorie = ""
                        },
                        new
                        {
                            Id = 2,
                            Categorie = "Tablettes",
                            SousCategorie = ""
                        },
                        new
                        {
                            Id = 3,
                            Categorie = "Smartphones",
                            SousCategorie = ""
                        },
                        new
                        {
                            Id = 4,
                            Categorie = "Cameras",
                            SousCategorie = ""
                        },
                        new
                        {
                            Id = 5,
                            Categorie = "Accessories",
                            SousCategorie = ""
                        });
                });

            modelBuilder.Entity("dotNetStore.Models.Commande", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FactureId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProduitId")
                        .HasColumnType("int");

                    b.Property<int>("Qte")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FactureId");

                    b.HasIndex("ProduitId");

                    b.ToTable("Commandes");
                });

            modelBuilder.Entity("dotNetStore.Models.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NomClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Shipping")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Factures");
                });

            modelBuilder.Entity("dotNetStore.Models.Marque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marques");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "SAMSUNG"
                        },
                        new
                        {
                            Id = 2,
                            Nom = "LG"
                        },
                        new
                        {
                            Id = 3,
                            Nom = "SONY"
                        });
                });

            modelBuilder.Entity("dotNetStore.Models.Produit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Autre1")
                        .HasColumnType("bit");

                    b.Property<bool>("Autre2")
                        .HasColumnType("bit");

                    b.Property<bool>("Autre3")
                        .HasColumnType("bit");

                    b.Property<bool>("BadgeNew")
                        .HasColumnType("bit");

                    b.Property<int>("BadgeReduction")
                        .HasColumnType("int");

                    b.Property<int?>("CategorieId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MarqueId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PrixAncien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("ReductionFolle")
                        .HasColumnType("bit");

                    b.Property<bool>("TopVente")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("MarqueId");

                    b.ToTable("Produits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Autre1 = true,
                            Autre2 = false,
                            Autre3 = true,
                            BadgeNew = true,
                            BadgeReduction = 30,
                            CategorieId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 2,
                            Nom = "Ordinateur 1",
                            Photo1 = "seed/ordinateur1-1.png",
                            Photo2 = "seed/ordinateur1-2.png",
                            Photo3 = "seed/ordinateur1-3.png",
                            Photo4 = "seed/ordinateur1-4.png",
                            Prix = 980m,
                            PrixAncien = 1000m,
                            ReductionFolle = true,
                            TopVente = true
                        },
                        new
                        {
                            Id = 2,
                            Autre1 = true,
                            Autre2 = true,
                            Autre3 = false,
                            BadgeNew = false,
                            BadgeReduction = 30,
                            CategorieId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 4,
                            Nom = "Ordinateur 2",
                            Photo1 = "seed/ordinateur2-1.png",
                            Prix = 880m,
                            PrixAncien = 900m,
                            ReductionFolle = false,
                            TopVente = true
                        },
                        new
                        {
                            Id = 3,
                            Autre1 = true,
                            Autre2 = false,
                            Autre3 = true,
                            BadgeNew = false,
                            BadgeReduction = 30,
                            CategorieId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 3,
                            Nom = "Ordinateur 3",
                            Photo1 = "seed/ordinateur3-1.png",
                            Photo2 = "seed/ordinateur3-2.png",
                            Prix = 780m,
                            PrixAncien = 800m,
                            ReductionFolle = true,
                            TopVente = false
                        },
                        new
                        {
                            Id = 4,
                            Autre1 = false,
                            Autre2 = true,
                            Autre3 = true,
                            BadgeNew = true,
                            BadgeReduction = 30,
                            CategorieId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 1,
                            Nom = "Ordinateur 4",
                            Photo1 = "seed/ordinateur4-1.png",
                            Photo2 = "seed/ordinateur4-2.png",
                            Photo3 = "seed/ordinateur4-3.png",
                            Photo4 = "seed/ordinateur4-4.png",
                            Prix = 680m,
                            PrixAncien = 700m,
                            ReductionFolle = false,
                            TopVente = true
                        },
                        new
                        {
                            Id = 5,
                            Autre1 = false,
                            Autre2 = true,
                            Autre3 = true,
                            BadgeNew = false,
                            BadgeReduction = 0,
                            CategorieId = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 3,
                            Nom = "Tablette 1",
                            Photo1 = "seed/tablette1-1.png",
                            Photo2 = "seed/tablette1-2.png",
                            Prix = 580m,
                            PrixAncien = 600m,
                            ReductionFolle = true,
                            TopVente = false
                        },
                        new
                        {
                            Id = 6,
                            Autre1 = true,
                            Autre2 = true,
                            Autre3 = false,
                            BadgeNew = true,
                            BadgeReduction = 0,
                            CategorieId = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 1,
                            Nom = "Smartphone 1",
                            Photo1 = "seed/smartphone1-1.png",
                            Photo2 = "seed/smartphone1-2.png",
                            Photo3 = "seed/smartphone1-3.png",
                            Photo4 = "seed/smartphone1-4.png",
                            Prix = 480m,
                            PrixAncien = 500m,
                            ReductionFolle = false,
                            TopVente = true
                        },
                        new
                        {
                            Id = 7,
                            Autre1 = true,
                            Autre2 = true,
                            Autre3 = false,
                            BadgeNew = false,
                            BadgeReduction = 0,
                            CategorieId = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 1,
                            Nom = "Camera 1",
                            Photo1 = "seed/camera1-1.png",
                            Prix = 380m,
                            PrixAncien = 400m,
                            ReductionFolle = false,
                            TopVente = true
                        },
                        new
                        {
                            Id = 8,
                            Autre1 = true,
                            Autre2 = false,
                            Autre3 = true,
                            BadgeNew = true,
                            BadgeReduction = 0,
                            CategorieId = 5,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 2,
                            Nom = "Ecouteuses 1",
                            Photo1 = "seed/ecouteuses1-1.png",
                            Photo2 = "seed/ecouteuses1-2.png",
                            Photo3 = "seed/ecouteuses1-3.png",
                            Prix = 280m,
                            PrixAncien = 300m,
                            ReductionFolle = true,
                            TopVente = false
                        },
                        new
                        {
                            Id = 9,
                            Autre1 = false,
                            Autre2 = true,
                            Autre3 = true,
                            BadgeNew = false,
                            BadgeReduction = 0,
                            CategorieId = 5,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
                            IsDeleted = false,
                            MarqueId = 3,
                            Nom = "Ecouteuses 2",
                            Photo1 = "seed/ecouteuses2-1.png",
                            Photo2 = "seed/ecouteuses2-2.png",
                            Prix = 180m,
                            PrixAncien = 200m,
                            ReductionFolle = true,
                            TopVente = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dotNetStore.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dotNetStore.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotNetStore.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dotNetStore.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotNetStore.Models.Commande", b =>
                {
                    b.HasOne("dotNetStore.Models.Facture", "Facture")
                        .WithMany("Commandes")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("dotNetStore.Models.Produit", "Produit")
                        .WithMany("Commandes")
                        .HasForeignKey("ProduitId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Facture");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("dotNetStore.Models.Produit", b =>
                {
                    b.HasOne("dotNetStore.Models.CategorieProduit", "Categorie")
                        .WithMany("Produits")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("dotNetStore.Models.Marque", "Marque")
                        .WithMany("Produits")
                        .HasForeignKey("MarqueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Categorie");

                    b.Navigation("Marque");
                });

            modelBuilder.Entity("dotNetStore.Models.CategorieProduit", b =>
                {
                    b.Navigation("Produits");
                });

            modelBuilder.Entity("dotNetStore.Models.Facture", b =>
                {
                    b.Navigation("Commandes");
                });

            modelBuilder.Entity("dotNetStore.Models.Marque", b =>
                {
                    b.Navigation("Produits");
                });

            modelBuilder.Entity("dotNetStore.Models.Produit", b =>
                {
                    b.Navigation("Commandes");
                });
#pragma warning restore 612, 618
        }
    }
}
