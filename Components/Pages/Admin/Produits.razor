@page "/admin/produits"
@layout dotNetStore.Components.Layout.AdminLayout
@using Microsoft.EntityFrameworkCore
@using dotNetStore.Data
@using dotNetStore.Models
@using dotNetStore.Components.Layout
@inject ApplicationDbContext Context
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<style>
    .form-animation {
        transition: all 0.3s ease-in-out;
        opacity: 0;
        transform: translateY(-20px);
        max-height: 0;
        overflow: hidden;
    }

    .form-animation.show {
        opacity: 1;
        transform: translateY(0);
        max-height: 2000px;
    }

    .card-body {
        transition: all 0.3s ease-in-out;
    }

    .card-body td {
        vertical-align: middle !important;
    }

    .table-striped th {
        text-align: center;
    }

    .form-animation input, select, textarea {
        font-size: 14px !important;
        border: solid gray 1px !important;
    }

    .form-animation button {
        font-size: 14px !important;
    }

    .card-header button {
        font-size: 14px !important;
    }
</style>

<PageTitle>Gestion des Produits</PageTitle>

<div class="form-animation @(showForm ? "show" : "")">
    @if (showForm)
    {
        <div class="card mb-4">
            <div class="card-header bg-dark text-white">
                <h5 class="mb-0">@(currentProduct.Id == 0 ? "Ajouter un produit" : "Modifier le produit")</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@currentProduct" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="nom" class="form-label">Nom</label>
                                <InputText id="nom" @bind-Value="currentProduct.Nom" class="form-control" />
                                <ValidationMessage For="@(() => currentProduct.Nom)" />
                            </div>

                            <div class="mb-3">
                                <label for="categorie" class="form-label">Catégorie</label>
                                <InputSelect id="categorie" @bind-Value="currentProduct.CategorieId" class="form-select">
                                    <option value="">-- Sélectionner --</option>
                                    @foreach (var cat in categories)
                                    {
                                        <option value="@cat.Id">@cat.Categorie @(string.IsNullOrEmpty(cat.SousCategorie) ? "" : $"({cat.SousCategorie})")</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="mb-3">
                                <label for="marque" class="form-label">Marque</label>
                                <InputSelect id="marque" @bind-Value="currentProduct.MarqueId" class="form-select">
                                    <option value="">-- Sélectionner --</option>
                                    @foreach (var marque in marques)
                                    {
                                        <option value="@marque.Id">@marque.Nom</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="prix" class="form-label">Prix (DH)</label>
                                        <InputNumber id="prix" @bind-Value="currentProduct.Prix" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="prixAncien" class="form-label">Ancien Prix (DH)</label>
                                        <InputNumber id="prixAncien" @bind-Value="currentProduct.PrixAncien" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label for="prixShipping" class="form-label">Frais Livraison (DH)</label>
                                        <InputNumber id="prixShipping" @bind-Value="currentProduct.PrixShipping" class="form-control" />
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Points d'Affichage</label>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="currentProduct.ReductionFolle" class="form-check-input" />
                                    <label class="form-check-label">Réduction Folle</label>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="currentProduct.TopVente" class="form-check-input" />
                                    <label class="form-check-label">Top vente</label>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="currentProduct.Autre1" class="form-check-input" />
                                    <label class="form-check-label">Autre 1</label>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="currentProduct.Autre2" class="form-check-input" />
                                    <label class="form-check-label">Autre 2</label>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="currentProduct.Autre3" class="form-check-input" />
                                    <label class="form-check-label">Autre 3</label>
                                </div>
                            </div>

                            <div class="form-check">
                                <InputCheckbox @bind-Value="currentProduct.BadgeNew" class="form-check-input" />
                                <label class="form-check-label">New</label>
                            </div>
                            <div class="mb-3">
                                <label for="badgeReduction" class="form-label">Promo (%)</label>
                                <InputNumber id="badgeReduction" @bind-Value="currentProduct.BadgeReduction" class="form-control" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" @bind-Value="currentProduct.Description" class="form-control" rows="3" />
                            </div>
                        </div>
                    </div>

                    <!-- Section Upload des photos -->
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <div class="card">
                                <div class="card-header">Photo Principale</div>
                                <div class="card-body text-center">
                                    @if (!string.IsNullOrEmpty(currentProduct.Photo1))
                                    {
                                        <img src="/img/produits/@currentProduct.Photo1" class="img-thumbnail mb-2" style="max-height: 150px;" />
                                    }
                                    <InputFile OnChange="@(e => HandleFileUpload(e, 1))" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="card">
                                <div class="card-header">Photo 2</div>
                                <div class="card-body text-center">
                                    @if (!string.IsNullOrEmpty(currentProduct.Photo2))
                                    {
                                        <img src="/img/produits/@currentProduct.Photo2" class="img-thumbnail mb-2" style="max-height: 150px;" />
                                    }
                                    <InputFile OnChange="@(e => HandleFileUpload(e, 2))" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="card">
                                <div class="card-header">Photo 3</div>
                                <div class="card-body text-center">
                                    @if (!string.IsNullOrEmpty(currentProduct.Photo3))
                                    {
                                        <img src="/img/produits/@currentProduct.Photo3" class="img-thumbnail mb-2" style="max-height: 150px;" />
                                    }
                                    <InputFile OnChange="@(e => HandleFileUpload(e, 3))" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="card">
                                <div class="card-header">Photo 4</div>
                                <div class="card-body text-center">
                                    @if (!string.IsNullOrEmpty(currentProduct.Photo4))
                                    {
                                        <img src="/img/produits/@currentProduct.Photo4" class="img-thumbnail mb-2" style="max-height: 150px;" />
                                    }
                                    <InputFile OnChange="@(e => HandleFileUpload(e, 4))" class="form-control" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end gap-2 mt-4">
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Annuler</button>
                        <button type="submit" class="btn btn-primary">Enregistrer</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

<div class="card">
    <div class="card-header bg-dark text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Liste des Produits</h5>
        <div>
            <button class="btn btn-primary btn-sm me-2" @onclick="ShowAddForm">
                <i class="fas fa-plus me-1"></i> Ajouter
            </button>
            <button class="btn btn-danger btn-sm" @onclick="ToggleSearch">
                <i class="fas @(showSearch ? "fa-times" : "fa-search") me-1"></i> @(showSearch ? "Cacher" : "Rechercher")
            </button>
        </div>
    </div>

    @if (showSearch)
    {
        <div class="card-body bg-light">
            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label class="form-label">Nom du produit</label>
                        <input type="text" class="form-control" @bind="searchNom" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Catégorie</label>
                        <select class="form-select" @bind="searchCategorieId">
                            <option value="">Toutes les catégories</option>
                            @foreach (var cat in categories)
                            {
                                <option value="@cat.Id">@cat.Categorie</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="mb-3">
                        <label class="form-label">Marque</label>
                        <select class="form-select" @bind="searchMarqueId">
                            <option value="">Toutes les marques</option>
                            @foreach (var marque in marques)
                            {
                                <option value="@marque.Id">@marque.Nom</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="mb-3">
                        <label class="form-label">Prix Max (DH)</label>
                        <input type="number" class="form-control" @bind="searchPrixMax" />
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button class="btn btn-danger me-2" @onclick="ApplyFilters">
                    <i class="fas fa-filter me-1"></i> Appliquer
                </button>
                <button class="btn btn-outline-secondary" @onclick="ResetFilters">
                    <i class="fas fa-broom me-1"></i> Réinitialiser
                </button>
            </div>
        </div>
    }

    <div class="card-body">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Chargement...</span>
                </div>
            </div>
        }
        else if (filteredProducts == null || !filteredProducts.Any())
        {
            <div class="alert alert-info">Aucun produit trouvé</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Produit</th>
                            <th>Catégorie</th>
                            <th>Marque</th>
                            <th>Prix (DH)</th>
                            <th>Ancien Prix (DH)</th>
                            <th>Livraison (DH)</th>
                            <th>Points d'Affichage</th>
                            <th>% Promo</th>
                            <th>New</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in pagedProducts)
                        {
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (!string.IsNullOrEmpty(product.Photo1))
                                        {
                                            <img src="/img/produits/@product.Photo1" alt="@product.Nom"
                                                 style="width: 50px; height: 50px; object-fit: cover; margin-right: 10px;" />
                                        }
                                        <div>@product.Nom</div>
                                    </div>
                                </td>
                                <td>@(product.Categorie?.Categorie ?? "N/A")</td>
                                <td>@(product.Marque?.Nom ?? "N/A")</td>
                                <td>@FormatPrice(product.Prix)</td>
                                <td>@FormatPrice(product.PrixAncien)</td>
                                <td>@FormatPrice(product.PrixShipping)</td>
                                <td>
                                    @{
                                        var badges = new List<string>();
                                        if (product.ReductionFolle) badges.Add("Réduction Folle");
                                        if (product.TopVente) badges.Add("Top");
                                        if (product.Autre1) badges.Add("Autre1");
                                        if (product.Autre2) badges.Add("Autre2");
                                        if (product.Autre3) badges.Add("Autre3");
                                    }
                                    @if (badges.Any())
                                    {
                                        <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                                            @foreach (var badge in badges)
                                            {
                                                <span class="badge @GetBadgeClass(badge)">@badge</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (product.BadgeReduction > 0)
                                    {
                                        <span class="badge bg-light text-danger" style="border: 1px solid red; border-style:inset;">@product.BadgeReduction%</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    @if (product.BadgeNew)
                                    {
                                        <span class="badge bg-danger">New</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditProduct(product)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteProduct(product)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-3">
                <div>
                    <select class="form-select form-select-sm me-2" style="width: auto; display: inline-block;"
                            @bind="pageSize" @bind:event="oninput">
                        <option value="5">5 par page</option>
                        <option value="10">10 par page</option>
                        <option value="20">20 par page</option>
                        <option value="50">50 par page</option>
                    </select>
                    <Pagination ItemsCount="@totalItems" PageSize="@pageSize" CurrentPage="@currentPage" OnPageChanged="@OnPageChanged" />
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Produit> products = new();
    private List<Produit> filteredProducts = new();
    private List<Produit> pagedProducts = new();
    private List<CategorieProduit> categories = new();
    private List<Marque> marques = new();
    private bool isLoading = true;
    private bool showForm = false;
    private bool showSearch = false;
    private Produit currentProduct = new() { Nom = "" };
    private string? errorMessage;
    private int currentPage = 1;
    private int totalItems = 0;

    // Filtres de recherche
    private string searchNom = string.Empty;
    private int? searchCategorieId;
    private int? searchMarqueId;
    private decimal? searchPrixMax;

    private void ShowAddForm()
    {
        currentProduct = new Produit() { Nom = "" };
        showForm = true;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e, int photoNumber)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            if (file.Size > 2 * 1024 * 1024)
            {
                errorMessage = "La taille du fichier ne doit pas dépasser 2MB";
                return;
            }

            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
            var fileExtension = Path.GetExtension(file.Name).ToLower();
            if (!allowedExtensions.Contains(fileExtension))
            {
                errorMessage = "Seuls les fichiers JPG, JPEG et PNG sont autorisés";
                return;
            }

            var uniqueFileName = $"{Guid.NewGuid()}{fileExtension}";
            var relativePath = $"/img/produits/{uniqueFileName}";
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "img", "produits", uniqueFileName);

            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "img", "produits");
            if (!Directory.Exists(uploadsFolder))
            {
                Directory.CreateDirectory(uploadsFolder);
            }

            await using var fileStream = new FileStream(fullPath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fileStream);

            string? oldFileName = photoNumber switch
            {
                1 => currentProduct.Photo1,
                2 => currentProduct.Photo2,
                3 => currentProduct.Photo3,
                4 => currentProduct.Photo4,
                _ => null
            };

            if (!string.IsNullOrEmpty(oldFileName))
            {
                var oldFilePath = Path.Combine(uploadsFolder, oldFileName);
                if (File.Exists(oldFilePath))
                {
                    File.Delete(oldFilePath);
                }
            }

            switch (photoNumber)
            {
                case 1: currentProduct.Photo1 = uniqueFileName; break;
                case 2: currentProduct.Photo2 = uniqueFileName; break;
                case 3: currentProduct.Photo3 = uniqueFileName; break;
                case 4: currentProduct.Photo4 = uniqueFileName; break;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de l'upload: {ex.Message}";
        }
    }

    private string FormatPrice(decimal? price)
    {
        return price?.ToString("N2") + " DH" ?? "-";
    }

    private string GetBadgeClass(string badgeType)
    {
        return badgeType switch
        {
            "Réduction Folle" => "bg-success",
            "Top" => "bg-primary",
            "Autre1" => "bg-secondary text-light",
            "Autre2" => "bg-secondary text-light",
            "Autre3" => "bg-secondary text-light",
            _ => "bg-secondary"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            products = await Context.Produits
                .Include(p => p.Categorie)
                .Include(p => p.Marque)
                .Where(p => !p.IsDeleted)
                .OrderByDescending(p=>p.Id)
                .ToListAsync();

            categories = await Context.CategoriesProduits.ToListAsync();
            marques = await Context.Marques.ToListAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        var query = products.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchNom))
            query = query.Where(p => p.Nom.Contains(searchNom, StringComparison.OrdinalIgnoreCase));

        if (searchCategorieId.HasValue && searchCategorieId.Value > 0)
            query = query.Where(p => p.CategorieId == searchCategorieId.Value);

        if (searchMarqueId.HasValue && searchMarqueId.Value > 0)
            query = query.Where(p => p.MarqueId == searchMarqueId.Value);

        if (searchPrixMax.HasValue)
            query = query.Where(p => p.Prix <= searchPrixMax.Value);

        filteredProducts = query.ToList();
        totalItems = filteredProducts.Count;
        currentPage = 1;
        UpdatePagedData();
    }

    private void ResetFilters()
    {
        searchNom = string.Empty;
        searchCategorieId = null;
        searchMarqueId = null;
        searchPrixMax = null;
        ApplyFilters();
    }

    private void UpdatePagedData()
    {
        pagedProducts = filteredProducts
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnPageChanged(int page)
    {
        currentPage = page;
        UpdatePagedData();
    }

    private void ToggleSearch()
    {
        showSearch = !showSearch;
        if (!showSearch) ResetFilters();
    }

    private void EditProduct(Produit product)
    {
        currentProduct = new Produit
        {
            Id = product.Id,
            Nom = product.Nom,
            CategorieId = product.CategorieId,
            MarqueId = product.MarqueId,
            Prix = product.Prix,
            PrixAncien = product.PrixAncien,
            PrixShipping = product.PrixShipping,
            Description = product.Description,
            ReductionFolle = product.ReductionFolle,
            TopVente = product.TopVente,
            BadgeNew = product.BadgeNew,
            BadgeReduction = product.BadgeReduction,
            Autre1 = product.Autre1,
            Autre2 = product.Autre2,
            Autre3 = product.Autre3,
            Photo1 = product.Photo1,
            Photo2 = product.Photo2,
            Photo3 = product.Photo3,
            Photo4 = product.Photo4
        };
        showForm = true;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (currentProduct.Id == 0)
            {
                Context.Produits.Add(currentProduct);
            }
            else
            {
                var existingProduct = await Context.Produits.FindAsync(currentProduct.Id);
                if (existingProduct != null)
                {
                    Context.Entry(existingProduct).CurrentValues.SetValues(currentProduct);
                }
            }

            await Context.SaveChangesAsync();
            showForm = false;
            currentProduct = new Produit(){Nom=""};
            await LoadData();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de l'enregistrement: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        showForm = false;
        currentProduct = new Produit() { Nom = "" };
    }

    private async Task DeleteProduct(Produit product)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Êtes-vous sûr de vouloir supprimer le produit \"{product.Nom}\" ?"))
        {
            try
            {
                var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "img", "produits");
                if (!string.IsNullOrEmpty(product.Photo1)) DeleteImage(uploadsFolder, product.Photo1);
                if (!string.IsNullOrEmpty(product.Photo2)) DeleteImage(uploadsFolder, product.Photo2);
                if (!string.IsNullOrEmpty(product.Photo3)) DeleteImage(uploadsFolder, product.Photo3);
                if (!string.IsNullOrEmpty(product.Photo4)) DeleteImage(uploadsFolder, product.Photo4);

                product.IsDeleted = true;
                await Context.SaveChangesAsync();
                await LoadData();
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur lors de la suppression: {ex.Message}";
            }
        }
    }

    private void DeleteImage(string uploadsFolder, string fileName)
    {
        var filePath = Path.Combine(uploadsFolder, fileName);
        if (File.Exists(filePath))
        {
            // File.Delete(filePath);
        }
    }

    private int _pageSize = 10;

    private int pageSize
    {
        get => _pageSize;
        set
        {
            _pageSize = value;
            UpdatePagedData();
        }
    }
}